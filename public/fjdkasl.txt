
Last week I made a real-time video chat application using the firebase and tokbox API. You could see the demo project here at www.opentokfire.com

With this app, users could create rooms to video chat on different topics. There is a maximum of four videos per room. When the room reaches its capacity, users could be added onto a wait-list and still observe the on going conversation.  


To create this app, I first need a database to store the list of rooms. I created a firebase object using a location url that specify the location of the new table. 

<img src="https://s3.amazonaws.com/blogPics/Screen+Shot+2012-09-13+at+10.25.06+PM.png" alt="" />

Once I have the firebase object, I can use it to display the list of rooms at homepage. The firebase API uses an on() event listener to listen to changes in the database, and triggers the callback function containing the most recent list. That way,I could re-render the room list view when a new room is added

<img src="https://s3.amazonaws.com/blogPics/Screen+Shot+2012-09-13+at+10.22.27+PM.png" alt="" />

To add a room, I first need a session_id. I made a post request to '/getSession' controller function which generates a new session_id using the Tokbox API. 
<img src="https://s3.amazonaws.com/blogPics/Screen+Shot+2012-09-13+at+11.30.14+PM.png" alt="" />

Then I used set() function to set the session_id attribute. I also wanted each room to display its total numbers of users. So I added a 'totalUser' attributes and initialized it to 0. 

Now when the user enters a room, he will have a session_id to connect to a video session. To count the numbers of users in the room. I first created a new table called users_count and  then I used push() and removeOnDisconnect() to automatically add and remove the user from the database. 
<img src="https://s3.amazonaws.com/blogPics/Screen+Shot+2012-09-18+at+3.28.13+PM.png" alt="" />

Using the on() function, whenever there is a change in the user_count table, I recount the table and set the value of 'totalUser' attribute for each room. 

<img src="https://s3.amazonaws.com/blogPics/Screen+Shot+2012-09-14+at+1.03.58+PM.png" alt="" />

Using the same method, I also created a wait-list. When a user click on the 'waitlist_me' button, he is automatically added to the back of the waitlist table and set up removeOnDisconnect listener. 







